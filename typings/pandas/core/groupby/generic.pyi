from __future__ import annotations

from typing import Any

import pandas as pd
from pandas.core.groupby.generic import DataFrameGroupBy as _BaseGroupBy

class DataFrameGroupBy(
    _BaseGroupBy,
):

    def anomalize(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def apply_by_time(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_adx(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_atr(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_bbands(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_cmo(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_diffs(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_drawdown(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_ewm(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_ewma_volatility(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_expanding(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_expanding_apply(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_fip_momentum(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_fourier(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_hilbert(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_holiday_signature(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_hurst_exponent(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_lags(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_leads(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_macd(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_pct_change(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_ppo(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_qsmomentum(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_regime_detection(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_roc(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_rolling(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_rolling_apply(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_rolling_risk_metrics(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_rsi(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_stochastic_oscillator(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_timeseries_signature(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def augment_wavelet(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def binarize(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def correlate(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def filter_by_time(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def future_frame(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def pad_by_time(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def parallel_apply(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def plot_anomalies(self, *args: Any, **kwargs: Any) -> Any: ...
    def plot_anomalies_cleaned(self, *args: Any, **kwargs: Any) -> Any: ...
    def plot_anomalies_decomp(self, *args: Any, **kwargs: Any) -> Any: ...
    def plot_timeseries(self, *args: Any, **kwargs: Any) -> Any: ...
    def progress_apply(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def reduce_memory_usage(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def sort_dataframe(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def summarize_by_time(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def ts_features(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
    def ts_summary(self, *args: Any, **kwargs: Any) -> pd.DataFrame: ...
