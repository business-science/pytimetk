# future_frame { #pytimetk.future_frame }

```python
future_frame(
    data,
    date_column,
    length_out,
    freq=None,
    force_regular=False,
    bind_data=True,
    threads=1,
    show_progress=True,
    reduce_memory=False,
    engine='pandas',
)
```

Extend a DataFrame or GroupBy object with future dates.

The `future_frame` function extends a given DataFrame or GroupBy object with
future dates based on a specified length, optionally binding the original data.

## Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                        | Default    |
|---------------|----------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| data          | DataFrame or GroupBy(pandas or polars) | The `data` parameter is the input DataFrame or grouped object that you want to extend with future dates.                                                                                                                                                                                                                                                                                                                           | _required_ |
| date_column   | str                                    | The `date_column` parameter is a string that specifies the name of the column in the DataFrame that contains the dates. This column will be used to generate future dates.                                                                                                                                                                                                                                                         | _required_ |
| freq          | str                                    |                                                                                                                                                                                                                                                                                                                                                                                                                                    | `None`     |
| length_out    | int                                    | The `length_out` parameter specifies the number of future dates to be added to the DataFrame.                                                                                                                                                                                                                                                                                                                                      | _required_ |
| force_regular | bool                                   | The `force_regular` parameter is a boolean flag that determines whether the frequency of the future dates should be forced to be regular. If `force_regular` is set to `True`, the frequency of the future dates will be forced to be regular. If `force_regular` is set to `False`, the frequency of the future dates will be inferred from the input data (e.g. business calendars might be used). The default value is `False`. | `False`    |
| bind_data     | bool                                   | The `bind_data` parameter is a boolean flag that determines whether the extended data should be concatenated with the original data or returned separately. If `bind_data` is set to `True`, the extended data will be concatenated with the original data using `pd.concat`. If `bind_data` is set to `False`, the extended data will be returned separately. The default value is `True`.                                        | `True`     |
| threads       | int                                    | The `threads` parameter specifies the number of threads to use for parallel processing. If `threads` is set to `None`, it will use all available processors. If `threads` is set to `-1`, it will use all available processors as well.                                                                                                                                                                                            | `1`        |
| show_progress | bool                                   | A boolean parameter that determines whether to display progress using tqdm. If set to True, progress will be displayed. If set to False, progress will not be displayed.                                                                                                                                                                                                                                                           | `True`     |
| reduce_memory | bool                                   | The `reduce_memory` parameter is used to specify whether to reduce the memory usage of the DataFrame by converting int, float to smaller bytes and str to categorical data. This reduces memory for large data but may impact resolution of float and will change str to categorical. Default is True.                                                                                                                             | `False`    |
| engine        | (pandas, polars, auto)                 | The `engine` parameter specifies the engine to use for computation. ``"pandas"`` (default) performs the computation using pandas. ``"polars"`` converts the result to a polars DataFrame on return. ``"auto"`` infers the engine from the input data.                                                                                                                                                                              | `"pandas"` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type      | Description                                                                                             |
|--------|-----------|---------------------------------------------------------------------------------------------------------|
|        | DataFrame | An extended DataFrame with future dates. The concrete type matches the engine used to process the data. |

## Notes {.doc-section .doc-section-notes}


## Performance

This function uses a number of techniques to speed up computation for large
datasets with many time series groups:

- We vectorize where possible and use parallel processing to speed up.
- The `threads` parameter controls the number of threads to use for parallel
  processing.

    - Set threads = -1 to use all available processors.
    - Set threads = 1 to disable parallel processing.

## See Also {.doc-section .doc-section-see-also}

make_future_timeseries: Generate future dates for a time series.

## Examples {.doc-section .doc-section-examples}

```{python}
import pandas as pd
import pytimetk as tk

df = tk.load_dataset('m4_hourly', parse_dates = ['date'])
df

# Example 1 - Extend the data for a single time series group by 12 hours
extended_df = (
    df
        .query('id == "H10"')
        .future_frame(
            date_column = 'date',
            length_out  = 12
        )
)
extended_df
```

```{python}
# Example 2 - Extend the data for each group by 12 hours
extended_df = (
    df
        .groupby('id', sort = False) # Use sort = False to preserve the original order of the data
        .future_frame(
            date_column = 'date',
            length_out  = 12,
            threads     = 1 # Use 2 threads for parallel processing
        )
)
extended_df
```

```{python}
# Example 3 - Same as above, but just return the extended data with bind_data=False
extended_df = (
    df
        .groupby('id', sort = False)
        .future_frame(
            date_column = 'date',
            length_out  = 12,
            bind_data   = False # Returns just future data
        )
)
extended_df
```

```{python}
# Example 4 - Working with irregular dates: Business Days (Stocks Data)

import pytimetk as tk
import pandas as pd

# Stock data
df = tk.load_dataset('stocks_daily', parse_dates = ['date'])
df

# Allow irregular future dates (i.e. business days)
extended_df = (
    df
        .groupby('symbol', sort = False)
        .future_frame(
            date_column = 'date',
            length_out  = 12,
            force_regular = False, # Allow irregular future dates (i.e. business days)),
            bind_data   = True,
            threads     = 1
        )
)
extended_df
```

```{python}
# Force regular: Include Weekends
extended_df = (
    df
        .groupby('symbol', sort = False)
        .future_frame(
            date_column = 'date',
            length_out  = 12,
            force_regular = True, # Force regular future dates (i.e. include weekends)),
            bind_data   = True
        )
)
extended_df
```

```{python}
# Polars DataFrame using the tk accessor
import pandas as pd
import polars as pl


sample = pd.DataFrame(
    {
        "date": pd.date_range("2022-01-03", periods=4, freq="D"),
        "value": [1, 2, 3, 4],
    }
)

pl_df = pl.from_pandas(sample)

pl_df.tk.future_frame(
    date_column='date',
    length_out=2,
)
```