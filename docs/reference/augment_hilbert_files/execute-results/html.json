{
  "hash": "bddc7219969be6a26b81ce35b60640ca",
  "result": {
    "markdown": "---\ntitle: augment_hilbert\n---\n\n\n\n```python\naugment_hilbert(\n    data,\n    date_column,\n    value_column,\n    reduce_memory=True,\n    engine='pandas',\n)\n```\n\nApply the Hilbert transform to specified columns of a DataFrame or\nDataFrameGroupBy object.\n\nSignal Processing: The Hilbert transform is used in various signal processing techniques, including phase and amplitude modulation and demodulation, and in the analysis of signals with time-varying amplitude and frequency.\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name          | Type                                                     | Description                                                                                                                                                                                                                                                                                                                 | Default    |\n|---------------|----------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| data          | pd.DataFrame or pd.core.groupby.generic.DataFrameGroupBy | Input DataFrame or DataFrameGroupBy object with one or more columns of real-valued signals.                                                                                                                                                                                                                                 | _required_ |\n| value_column  | str or list                                              | List of column names in 'data' to which the Hilbert transform will be applied.                                                                                                                                                                                                                                              | _required_ |\n| reduce_memory | bool                                                     | The `reduce_memory` parameter is used to specify whether to reduce the memory usage of the DataFrame by converting int, float to smaller bytes and str to categorical data. This reduces memory for large data but may impact resolution of float and will change str to categorical. Default is True.                      | `True`     |\n| engine        | str                                                      | The `engine` parameter is used to specify the engine to use for summarizing the data. It can be either \"pandas\" or \"polars\".  - The default value is \"pandas\".  - When \"polars\", the function will internally use the `polars` library for summarizing the data. This can be faster than using \"pandas\" for large datasets. | `'pandas'` |\n\n## Returns {.doc-section .doc-section-returns}\n\n| Name       | Type         | Description                                                                                                                        |\n|------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|\n| df_hilbert | pd.DataFrame | A new DataFrame with the 2 Hilbert-transformed columns added, 1 for the real and 1 for imaginary (original columns are preserved). |\n\n## Notes {.doc-section .doc-section-notes}\n\nThe Hilbert transform is used in time series analysis primarily for:\n\n1. Creating Analytic Signals: Forms a complex-valued signal whose\nproperties (magnitude and phase) provide valuable insights into the\noriginal signal's structure.\n\n2. Determining Instantaneous Phase/Frequency: Offers real-time signal\ncharacteristics, crucial for non-stationary signals whose properties\nchange over time.\n\n3. Extracting Amplitude Envelope: Helps in identifying signal's\namplitude variations, useful in various analysis tasks.\n\n4. Enhancing Signal Analysis: Assists in tasks like demodulation, trend\nanalysis, feature extraction for machine learning, and improving\nsignal-to-noise ratio, providing a deeper understanding of underlying\npatterns and trends.\n\n## Examples {.doc-section .doc-section-examples}\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Example 1: Using Pandas Engine on a pandas groupby object\nimport pytimetk as tk\nimport pandas as pd\n\ndf = tk.load_dataset('walmart_sales_weekly', parse_dates=['Date'])\n\n\ndf_hilbert = (\n    df\n        .groupby('id')\n        .augment_hilbert(\n            date_column = 'Date',\n            value_column = ['Weekly_Sales'],\n            engine = 'pandas'\n        )\n)\n\ndf_hilbert.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Store</th>\n      <th>Dept</th>\n      <th>Date</th>\n      <th>Weekly_Sales</th>\n      <th>IsHoliday</th>\n      <th>Type</th>\n      <th>Size</th>\n      <th>Temperature</th>\n      <th>Fuel_Price</th>\n      <th>MarkDown1</th>\n      <th>MarkDown2</th>\n      <th>MarkDown3</th>\n      <th>MarkDown4</th>\n      <th>MarkDown5</th>\n      <th>CPI</th>\n      <th>Unemployment</th>\n      <th>Weekly_Sales_hilbert_real</th>\n      <th>Weekly_Sales_hilbert_imag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-05</td>\n      <td>24924.500000</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>42.310001</td>\n      <td>2.572</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.096359</td>\n      <td>8.106</td>\n      <td>24924.498047</td>\n      <td>-12764.086914</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-12</td>\n      <td>46039.488281</td>\n      <td>1</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>38.509998</td>\n      <td>2.548</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.242172</td>\n      <td>8.106</td>\n      <td>46039.488281</td>\n      <td>-13469.210938</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-19</td>\n      <td>41595.550781</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>39.930000</td>\n      <td>2.514</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.289139</td>\n      <td>8.106</td>\n      <td>41595.550781</td>\n      <td>16686.888672</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-26</td>\n      <td>19403.539062</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>46.630001</td>\n      <td>2.561</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.319641</td>\n      <td>8.106</td>\n      <td>19403.535156</td>\n      <td>9378.224609</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-03-05</td>\n      <td>21827.900391</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>46.500000</td>\n      <td>2.625</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.350143</td>\n      <td>8.106</td>\n      <td>21827.898438</td>\n      <td>2552.131836</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Example 2: Using Polars Engine on a pandas groupby object\nimport pytimetk as tk\nimport pandas as pd\n\ndf = tk.load_dataset('walmart_sales_weekly', parse_dates=['Date'])\ndf_hilbert = (\n    df\n        .groupby('id')\n        .augment_hilbert(\n            date_column = 'Date',\n            value_column = ['Weekly_Sales'],\n            engine = 'polars'\n        )\n)\n\ndf_hilbert.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Store</th>\n      <th>Dept</th>\n      <th>Date</th>\n      <th>Weekly_Sales</th>\n      <th>IsHoliday</th>\n      <th>Type</th>\n      <th>Size</th>\n      <th>Temperature</th>\n      <th>Fuel_Price</th>\n      <th>MarkDown1</th>\n      <th>MarkDown2</th>\n      <th>MarkDown3</th>\n      <th>MarkDown4</th>\n      <th>MarkDown5</th>\n      <th>CPI</th>\n      <th>Unemployment</th>\n      <th>Weekly_Sales_hilbert_real</th>\n      <th>Weekly_Sales_hilbert_imag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-05</td>\n      <td>24924.500000</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>42.310001</td>\n      <td>2.572</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.096359</td>\n      <td>8.106</td>\n      <td>24924.498047</td>\n      <td>-12764.086914</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-12</td>\n      <td>46039.488281</td>\n      <td>1</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>38.509998</td>\n      <td>2.548</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.242172</td>\n      <td>8.106</td>\n      <td>46039.488281</td>\n      <td>-13469.210938</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-19</td>\n      <td>41595.550781</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>39.930000</td>\n      <td>2.514</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.289139</td>\n      <td>8.106</td>\n      <td>41595.550781</td>\n      <td>16686.888672</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-02-26</td>\n      <td>19403.539062</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>46.630001</td>\n      <td>2.561</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.319641</td>\n      <td>8.106</td>\n      <td>19403.535156</td>\n      <td>9378.224609</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1_1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2010-03-05</td>\n      <td>21827.900391</td>\n      <td>0</td>\n      <td>A</td>\n      <td>151315</td>\n      <td>46.500000</td>\n      <td>2.625</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>211.350143</td>\n      <td>8.106</td>\n      <td>21827.898438</td>\n      <td>2552.131836</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Example 3: Using Polars Engine on a pandas dataframe\nimport pytimetk as tk\nimport pandas as pd\n\ndf = tk.load_dataset('taylor_30_min', parse_dates=['date'])\ndf_hilbert = (\n    df\n        .augment_hilbert(\n            date_column = 'date',\n            value_column = ['value'],\n            engine = 'polars'\n        )\n)\n\ndf_hilbert.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_hilbert_real</th>\n      <th>value_hilbert_imag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000-06-05 00:00:00+00:00</td>\n      <td>22262</td>\n      <td>22262.0</td>\n      <td>-1269.805176</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000-06-05 00:30:00+00:00</td>\n      <td>21756</td>\n      <td>21756.0</td>\n      <td>-2755.227539</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2000-06-05 01:00:00+00:00</td>\n      <td>22247</td>\n      <td>22247.0</td>\n      <td>-4077.813232</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2000-06-05 01:30:00+00:00</td>\n      <td>22759</td>\n      <td>22759.0</td>\n      <td>-4404.573242</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2000-06-05 02:00:00+00:00</td>\n      <td>22549</td>\n      <td>22549.0</td>\n      <td>-4629.981445</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Example 4: Using Polars Engine on a groupby object\nimport pytimetk as tk\nimport pandas as pd\n\ndf = tk.load_dataset('taylor_30_min', parse_dates=['date'])\ndf_hilbert_pd = (\n    df\n        .augment_hilbert(\n            date_column = 'date',\n            value_column = ['value'],\n            engine = 'pandas'\n        )\n)\n\ndf_hilbert.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>value</th>\n      <th>value_hilbert_real</th>\n      <th>value_hilbert_imag</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000-06-05 00:00:00+00:00</td>\n      <td>22262</td>\n      <td>22262.0</td>\n      <td>-1269.805176</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000-06-05 00:30:00+00:00</td>\n      <td>21756</td>\n      <td>21756.0</td>\n      <td>-2755.227539</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2000-06-05 01:00:00+00:00</td>\n      <td>22247</td>\n      <td>22247.0</td>\n      <td>-4077.813232</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2000-06-05 01:30:00+00:00</td>\n      <td>22759</td>\n      <td>22759.0</td>\n      <td>-4404.573242</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2000-06-05 02:00:00+00:00</td>\n      <td>22549</td>\n      <td>22549.0</td>\n      <td>-4629.981445</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "augment_hilbert_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}