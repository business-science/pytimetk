# augment_rolling { #pytimetk.augment_rolling }

```python
augment_rolling(
    data,
    date_column,
    value_column,
    window_func='mean',
    window=2,
    min_periods=None,
    engine='auto',
    center=False,
    threads=1,
    show_progress=True,
    reduce_memory=False,
    **kwargs,
)
```

Apply one or more Series-based rolling functions and window sizes to one or more columns of a DataFrame.

## Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                                            | Description| Default    |
|---------------|-----------------------------------------------------------------||------------|
| data          | Union\[pd.DataFrame, pd.core.groupby.generic.DataFrameGroupBy\] | Input data to be processed. Can be a Pandas DataFrame or a GroupBy object| _required_ |
| date_column   | str                                                             | Name of the datetime column. Data is sorted by this column within each group.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | _required_ |
| value_column  | Union\[str, list\]                                              | Column(s) to which the rolling window functions should be applied. Can be a single column name or a list| _required_ |
| window_func   | Union\[str, list, Tuple\[str, Callable\]\]                      | The `window_func` parameter in the `augment_rolling` function specifies the function(s) to be applied to the rolling windows of the value column(s).  1. It can be either:     - A string representing the name of a standard function (e.g.,       'mean', 'sum').  2. For custom functions:     - Provide a list of tuples. Each tuple should contain a custom name       for the function and the function itself.     - Each custom function should accept a Pandas Series as its input       and operate on that series.       Example: ("range", lambda x: x.max() - x.min())  (See more Examples below.)  Note: If your function needs to operate on multiple columns (i.e., it       requires access to a DataFrame rather than just a Series),       consider using the `augment_rolling_apply` function in this library. | `'mean'`   |
| window        | Union\[int, tuple, list\]                                       | Specifies the size of the rolling windows. - An integer applies the same window size to all columns in `value_column`. - A tuple generates windows from the first to the second value (inclusive). - A list of integers designates multiple window sizes for each respective   column| `2`        |
| min_periods   | int                                                             | Minimum observations in the window to have a value. Defaults to the window size. If set, a value will be produced even if fewer observations are present than the window size| `None`     |
| center        | bool                                                            | If `True`, the rolling window will be centered on the current value. For even-sized windows, the window will be left-biased. Otherwise, it uses a trailing window| `False`    |
| threads       | int                                                             | Number of threads to use for parallel processing. If `threads` is set to 1, parallel processing will be disabled. Set to -1 to use all available CPU cores| `1`        |
| show_progress | bool                                                            | If `True`, a progress bar will be displayed during parallel processing| `True`     |
| reduce_memory | bool                                                            | The `reduce_memory` parameter is used to specify whether to reduce the memory usage of the DataFrame by converting int, float to smaller bytes and str to categorical data. This reduces memory for large data but may impact resolution of float and will change str to categorical. Default is False| `False`    |
| engine        | (auto, pandas, polars)                                          | Specifies the backend computation library for augmenting rolling window functions. When "auto" the backend is inferred from the input data type. Use "pandas" or "polars" to force a specific backend| `"auto"`   |

## Returns {.doc-section .doc-section-returns}

| Name   | Type         | Description                                                                                                                   |
|--------|--------------|-------------------------------------------------------------------------------------------------------------------------------|
|        | pd.DataFrame | The `augment_rolling` function returns a DataFrame with new columns for each applied function, window size, and value column. |

## Notes {.doc-section .doc-section-notes}

## Performance

This function uses parallel processing to speed up computation for large
datasets with many time series groups:

Parallel processing has overhead and may not be faster on small datasets.

To use parallel processing, set `threads = -1` to use all available processors.

## Examples {.doc-section .doc-section-examples}

```{python}
import pytimetk as tk
import pandas as pd
import numpy as np

df = tk.load_dataset("m4_daily", parse_dates = ['date'])
```

```{python}
# Example 1 - Using a single window size and a single function name, pandas engine
# This example demonstrates the use of both string-named functions and lambda
# functions on a rolling window. We specify a list of window sizes: [2,7].
# As a result, the output will have computations for both window sizes 2 and 7.
# Note - It's preferred to use built-in or configurable functions instead of
# lambda functions for performance reasons.

rolled_df = (
    df
        .groupby('id')
        .augment_rolling(
            date_column = 'date',
            value_column = 'value',
            window = [2,7],  # Specifying multiple window sizes
            window_func = [
                'mean',  # Built-in mean function
                ('std', lambda x: x.std())  # Lambda function to compute standard deviation
            ],
            threads = 1,  # Disabling parallel processing
            engine = 'pandas'  # Using pandas engine
        )
)
display(rolled_df)
```

```{python}
# Example 2 - Multiple groups, pandas engine
# Example showcasing the use of string function names and lambda functions
# applied on rolling windows. The `window` tuple (1,3) will generate window
# sizes of 1, 2, and 3.
# Note - It's preferred to use built-in or configurable functions instead of
# lambda functions for performance reasons.

rolled_df = (
    df
        .groupby('id')
        .augment_rolling(
            date_column = 'date',
            value_column = 'value',
            window = (1,3),  # Specifying a range of window sizes
            window_func = [
                'mean',  # Using built-in mean function
                ('std', lambda x: x.std())  # Lambda function for standard deviation
            ],
            threads = 1,  # Disabling parallel processing
            engine = 'pandas'  # Using pandas engine
        )
)
display(rolled_df)
```

```{python}
# Example 3 - Multiple groups, polars engine

import polars as pl
import pytimetk.polars_namespace

rolled_df = (
    pl.from_pandas(df)
        .group_by('id')
        .tk.augment_rolling(
            date_column = 'date',
            value_column = 'value',
            window = (1,3),  # Specifying a range of window sizes
            window_func = [
                'mean',  # Using built-in mean function
                'std',  # Using built-in standard deviation function
            ],
        )
)
display(rolled_df)
```