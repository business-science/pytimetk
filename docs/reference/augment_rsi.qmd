# augment_rsi { #pytimetk.augment_rsi }

```python
augment_rsi(
    data,
    date_column,
    close_column,
    periods=14,
    reduce_memory=False,
    engine='pandas',
)
```

The `augment_rsi` function calculates the Relative Strength Index (RSI) for a given financial
instrument using either pandas or polars engine, and returns the augmented DataFrame.

## Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                                            | Description                                                                                                                                                                                                                                                                                                                                          | Default    |
|---------------|-----------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| data          | Union\[pd.DataFrame, pd.core.groupby.generic.DataFrameGroupBy\] | The `data` parameter is the input data that can be either a pandas DataFrame or a pandas DataFrameGroupBy object. It contains the data on which the RSI will be calculated.                                                                                                                                                                          | _required_ |
| date_column   | str                                                             | The name of the column in the data that contains the dates or timestamps.                                                                                                                                                                                                                                                                            | _required_ |
| close_column  | str                                                             | The `close_column` parameter is used to specify the column(s) in the input data that contain the values on which the RSI will be calculated. It can be either a single column name (string) or a list of column names (if you want to calculate RSI on multiple columns).                                                                            | _required_ |
| periods       | Union\[int, Tuple\[int, int\], List\[int\]\]                    | The `periods` parameter in the `augment_rsi` function specifies the number of rolling periods over which the RSI is calculated. It can be provided as an integer, a tuple of two integers (start and end periods), or a list of integers.                                                                                                            | `14`       |
| reduce_memory | bool                                                            | The `reduce_memory` parameter is a boolean flag that indicates whether or not to reduce the memory usage of the data before performing the RSI calculation. If set to `True`, the function will attempt to reduce the memory usage of the input data. If set to `False`, the function will not attempt to reduce the memory usage of the input data. | `False`    |
| engine        | str                                                             | The `engine` parameter specifies the computation engine to use for calculating the RSI. It can take two values: 'pandas' or 'polars'.                                                                                                                                                                                                                | `'pandas'` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type         | Description                                                                                                                                 |
|--------|--------------|---------------------------------------------------------------------------------------------------------------------------------------------|
|        | pd.DataFrame | The function `augment_rsi` returns a pandas DataFrame that contains the augmented data with the Relative Strength Index (RSI) values added. |

## Notes {.doc-section .doc-section-notes}

The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements. Developed by J. Welles Wilder Jr. and introduced in his 1978 book "New Concepts in Technical Trading Systems", the RSI is one of the most well-known and widely used technical analysis indicators.

- Range: The RSI oscillates between 0 and 100.
- Overbought and Oversold Levels: Traditionally, the RSI is
considered overbought when above 70 and oversold when below
30. These thresholds can indicate potential reversal points
where a security is overvalued or undervalued.
- Divergence: RSI can also be used to identify potential
reversals by looking for bearish and bullish divergences.

## Examples {.doc-section .doc-section-examples}

```{python}
import pandas as pd
import pytimetk as tk

df = tk.load_dataset('stocks_daily', parse_dates=['date'])
df

# Example 1 - Calculate RSI for a single column
rsi_df = (
    df
        .query("symbol == 'AAPL'")
        .augment_rsi(
            date_column='date',
            close_column='adjusted',
            periods=[14, 28]
        )
)
rsi_df
```

``` {python}
# Example 2 - Calculate RSI for multiple groups
rsi_df = (
    df
        .groupby('symbol')
        .augment_rsi(
            date_column='date',
            close_column='adjusted',
            periods=[14, 28]
        )
)
rsi_df.groupby('symbol').tail(1)

```

```{python}
# Example 3 - Calculate RSI for polars engine
rsi_df = (
    df
        .query("symbol == 'AAPL'")
        .augment_rsi(
            date_column='date',
            close_column='adjusted',
            periods=[14, 28],
            engine='polars'
        )
)
rsi_df
```

```{python}
# Example 4 - Calculate RSI for polars engine and groups
rsi_df = (
    df
        .groupby('symbol')
        .augment_rsi(
            date_column='date',
            close_column='adjusted',
            periods=[14, 28],
            engine='polars'
        )
)
rsi_df.groupby('symbol').tail(1)
```