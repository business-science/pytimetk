# summarize_by_time { #pytimetk.summarize_by_time }

```python
summarize_by_time(
    data,
    date_column,
    value_column,
    freq='D',
    agg_func='sum',
    wide_format=False,
    fillna=0,
    engine='pandas',
)
```

Summarize a DataFrame or GroupBy object by time.

The `summarize_by_time` function aggregates data by a specified time period 
and one or more numeric columns, allowing for grouping and customization of 
the time-based aggregation.

## Parameters {.doc-section .doc-section-parameters}

| Name         | Type                                                     | Description| Default    |
|--------------|----------------------------------------------------------||------------|
| data         | pd.DataFrame or pd.core.groupby.generic.DataFrameGroupBy | A pandas DataFrame or a pandas GroupBy object. This is the data that you  want to summarize by time| _required_ |
| date_column  | str                                                      | The name of the column in the data frame that contains the dates or  timestamps to be aggregated by. This column must be of type datetime| _required_ |
| value_column | str or list                                              | The `value_column` parameter is the name of one or more columns in the  DataFrame that you want to aggregate by. It can be either a string  representing a single column name, or a list of strings representing  multiple column names.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | _required_ |
| freq         | str                                                      | The `freq` parameter specifies the frequency at which the data should be  aggregated. It accepts a string representing a pandas frequency offset,  such as "D" for daily or "MS" for month start. The default value is "D",  which means the data will be aggregated on a daily basis. Some common  frequency aliases include:  - S: secondly frequency - min: minute frequency - H: hourly frequency - D: daily frequency - W: weekly frequency - M: month end frequency - MS: month start frequency - Q: quarter end frequency - QS: quarter start frequency - Y: year end frequency - YS: year start frequency                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | `'D'`      |
| agg_func     | list                                                     | The `agg_func` parameter is used to specify one or more aggregating  functions to apply to the value column(s) during the summarization  process. It can be a single function or a list of functions. The default  value is `"sum"`, which represents the sum function. Some common  aggregating functions include:  - "sum": Sum of values - "mean": Mean of values - "median": Median of values - "min": Minimum of values - "max": Maximum of values - "std": Standard deviation of values - "var": Variance of values - "first": First value in group - "last": Last value in group - "count": Count of values - "nunique": Number of unique values - "corr": Correlation between values  Pandas Engine Only: Custom `lambda` aggregating functions can be used too. Here are several  common examples:  - ("q25", lambda x: x.quantile(0.25)): 25th percentile of values - ("q75", lambda x: x.quantile(0.75)): 75th percentile of values - ("iqr", lambda x: x.quantile(0.75) - x.quantile(0.25)): Interquartile range of values - ("range", lambda x: x.max() - x.min()): Range of values | `'sum'`    |
| wide_format  | bool                                                     | A boolean parameter that determines whether the output should be in  "wide" or "long" format. If set to `True`, the output will be in wide  format, where each group is represented by a separate column. If set to  False, the output will be in long format, where each group is represented  by a separate row. The default value is `False`| `False`    |
| fillna       | int                                                      | The `fillna` parameter is used to specify the value to fill missing data  with. By default, it is set to 0. If you want to keep missing values as  NaN, you can use `np.nan` as the value for `fillna`| `0`        |
| engine       | str                                                      | The `engine` parameter is used to specify the engine to use for  summarizing the data. It can be either "pandas" or "polars".   - The default value is "pandas".  - When "polars", the function will internally use the `polars` library    for summarizing the data. This can be faster than using "pandas" for    large datasets| `'pandas'` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type         | Description                                    |
|--------|--------------|------------------------------------------------|
|        | pd.DataFrame | A Pandas DataFrame that is summarized by time. |

## Examples {.doc-section .doc-section-examples}

```{python}
import pytimetk as tk
import pandas as pd

df = tk.load_dataset('bike_sales_sample', parse_dates = ['order_date'])

df
```

```{python}
# Example 1 - Summarize by time with a DataFrame object, pandas engine
( 
    df 
        .summarize_by_time(
            date_column  = 'order_date', 
            value_column = 'total_price',
            freq         = "MS",
            agg_func     = ['mean', 'sum'],
            engine       = 'pandas'
        )
)
```

```{python}
# Example 2 - Summarize by time with a GroupBy object (Wide Format), polars engine
(
    df 
        .groupby(['category_1', 'frame_material']) 
        .summarize_by_time(
            date_column  = 'order_date', 
            value_column = ['total_price', 'quantity'], 
            freq         = 'MS',
            agg_func     = 'sum',
            wide_format  = True, 
            engine       = 'polars'
        )
)
```

```{python}
# Example 3 - Summarize by time with a GroupBy object (Wide Format)
(
    df 
        .groupby('category_1') 
        .summarize_by_time(
            date_column  = 'order_date', 
            value_column = 'total_price', 
            freq         = 'MS',
            agg_func     = 'sum',
            wide_format  = True,
            engine       = 'pandas' 
        )
)
```

```{python}
# Example 4 - Summarize by time with a GroupBy object and multiple value columns and summaries (Wide Format)
# Note - This example only works with the pandas engine
(
    df 
        .groupby('category_1') 
        .summarize_by_time(
            date_column  = 'order_date', 
            value_column = ['total_price', 'quantity'], 
            freq         = 'MS',
            agg_func     = [
                'sum', 
                'mean', 
                ('q25', lambda x: x.quantile(0.25)), 
                ('q75', lambda x: x.quantile(0.75))
            ],
            wide_format  = False,
            engine       = 'pandas' 
        )
)
```