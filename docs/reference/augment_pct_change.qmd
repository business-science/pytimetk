# augment_pct_change { #pytimetk.augment_pct_change }

```python
augment_pct_change(
    data,
    date_column,
    value_column,
    periods=1,
    reduce_memory=False,
    engine='auto',
)
```

Adds percentage difference (percentage change) columns to pandas or polars data.

## Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | Default    |
|---------------|----------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| data          | DataFrame or GroupBy(pandas or polars) | Input data to augment with percentage change columns.                                                                                                                                                                                                                                                                                                                                                                                                                                              | _required_ |
| date_column   | str                                    | The `date_column` parameter is a string that specifies the name of the column in the DataFrame that contains the dates. This column will be used to sort the data before adding the percentage differenced values.                                                                                                                                                                                                                                                                                 | _required_ |
| value_column  | str or list                            | The `value_column` parameter is the column(s) in the DataFrame that you want to add percentage differences values for. It can be either a single column name (string) or a list of column names.                                                                                                                                                                                                                                                                                                   | _required_ |
| periods       | int or tuple or list                   | The `periods` parameter is an integer, tuple, or list that specifies the periods to shift values when percentage differencing.  - If it is an integer, the function will add that number of percentage differences   values for each column specified in the `value_column` parameter.  - If it is a tuple, it will generate percentage differences from the first to the second   value (inclusive).  - If it is a list, it will generate percentage differences based on the values in the list. | `1`        |
| reduce_memory | bool                                   | The `reduce_memory` parameter is used to specify whether to reduce the memory usage of the DataFrame by converting int, float to smaller bytes and str to categorical data. This reduces memory for large data but may impact resolution of float and will change str to categorical. Default is True.                                                                                                                                                                                             | `False`    |
| engine        | (auto, pandas, polars)                 | Execution engine. When "auto" (default) the backend is inferred from the input data type. Use "pandas" or "polars" to force a specific backend.                                                                                                                                                                                                                                                                                                                                                    | `"auto"`   |

## Returns {.doc-section .doc-section-returns}

| Name   | Type      | Description                                                                                  |
|--------|-----------|----------------------------------------------------------------------------------------------|
|        | DataFrame | DataFrame with percentage differenced columns added, matching the backend of the input data. |

## Examples {.doc-section .doc-section-examples}

```{python}
import pandas as pd
import pytimetk as tk

df = tk.load_dataset('m4_daily', parse_dates=['date'])
df
```

```{python}
# Example 1 - Add 7 pctdiff values for a single DataFrame object, pandas engine
pctdiff_df_single = (
    df
        .query('id == "D10"')
        .augment_pct_change(
            date_column='date',
            value_column='value',
            periods=(1, 7),
            engine='pandas'
        )
)
pctdiff_df_single.glimpse()
```

```{python}
# Example 2 - Add a single percent differenced value of 2 for each GroupBy object, polars engine
pctdiff_df = (
    df
        .groupby('id')
        .augment_pct_change(
            date_column='date',
            value_column='value',
            periods=2,
            engine='polars'
        )
)
pctdiff_df
```

```{python}
# Example 3 add 2 percent differenced values, 2 and 4, for a single DataFrame object, pandas engine
pctdiff_df_single_two = (
    df
        .query('id == "D10"')
        .augment_diffs(
            date_column='date',
            value_column='value',
            periods=[2, 4],
            engine='pandas'
        )
)
pctdiff_df_single_two
```