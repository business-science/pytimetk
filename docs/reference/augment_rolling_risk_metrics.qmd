# augment_rolling_risk_metrics { #pytimetk.augment_rolling_risk_metrics }

```python
augment_rolling_risk_metrics(
    data,
    date_column,
    close_column,
    window=252,
    risk_free_rate=0.0,
    benchmark_column=None,
    annualization_factor=252,
    metrics=None,
    reduce_memory=False,
    engine='pandas',
)
```

The augment_rolling_risk_metrics function calculates rolling risk-adjusted performance
metrics for a financial time series using either pandas or polars engine, and returns
the augmented DataFrame with columns for Sharpe Ratio, Sortino Ratio, and other metrics.

## Parameters {.doc-section .doc-section-parameters}

| Name                 | Type                                                            | Description                                                                                                                                                                                                               | Default    |
|----------------------|-----------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|
| data                 | Union\[pd.DataFrame, pd.core.groupby.generic.DataFrameGroupBy\] | The input data can be a pandas DataFrame or a pandas DataFrameGroupBy object containing the time series data for risk metric calculations.                                                                                | _required_ |
| date_column          | str                                                             | The name of the column containing dates or timestamps.                                                                                                                                                                    | _required_ |
| close_column         | str                                                             | The column containing closing prices to calculate returns and risk metrics from.                                                                                                                                          | _required_ |
| window               | int                                                             | The rolling window size for calculations (e.g., 252 for annual). Default is 252.                                                                                                                                          | `252`      |
| risk_free_rate       | float                                                           | The assumed risk-free rate (e.g., 0.0 for 0%). Default is 0.0.                                                                                                                                                            | `0.0`      |
| benchmark_column     | str or None                                                     | The column containing benchmark returns (e.g., market index) for Treynor and Information Ratios. Default is None.                                                                                                         | `None`     |
| annualization_factor | int                                                             | The factor to annualize returns and volatility (e.g., 252 for daily data). Default is 252.                                                                                                                                | `252`      |
| metrics              | List\[str\] or None                                             | The list of risk metrics to calculate. Choose from: 'sharpe_ratio', 'sortino_ratio', 'treynor_ratio', 'information_ratio', 'omega_ratio', 'volatility_annualized', 'skewness', 'kurtosis'. Default is None (all metrics). | `None`     |
| reduce_memory        | bool                                                            | If True, reduces memory usage of the DataFrame before calculation. Default is False.                                                                                                                                      | `False`    |
| engine               | str                                                             | The computation engine to use: 'pandas' or 'polars'. Default is 'pandas'.                                                                                                                                                 | `'pandas'` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type         | Description|
|--------|--------------||
|        | pd.DataFrame | A pandas DataFrame augmented with columns: - {close_column}_sharpe_ratio_{window}: Rolling Sharpe Ratio - {close_column}_sortino_ratio_{window}: Rolling Sortino Ratio - {close_column}_treynor_ratio_{window}: Rolling Treynor Ratio (if benchmark provided) - {close_column}_information_ratio_{window}: Rolling Information Ratio (if benchmark provided) - {close_column}_omega_ratio_{window}: Rolling Omega Ratio - {close_column}_volatility_annualized_{window}: Rolling annualized volatility - {close_column}_skewness_{window}: Rolling skewness of returns - {close_column}_kurtosis_{window}: Rolling kurtosis of returns |

## Notes {.doc-section .doc-section-notes}

This function computes returns from closing prices and calculates rolling risk metrics:

- Sharpe Ratio: Excess return over risk-free rate divided by volatility
- Sortino Ratio: Excess return over risk-free rate divided by downside deviation
- Treynor Ratio: Excess return over risk-free rate divided by beta (requires benchmark)
- Information Ratio: Excess return over benchmark divided by tracking error (requires benchmark)
- Omega Ratio: Ratio of gains to losses above/below a threshold
- Volatility: Annualized standard deviation of returns
- Skewness: Asymmetry of return distribution
- Kurtosis: Fat-tailedness of return distribution

## Examples {.doc-section .doc-section-examples}

``` {python}
import pandas as pd
import pytimetk as tk

df = tk.load_dataset('stocks_daily', parse_dates=['date'])

# Single stock risk metrics
risk_df = (
    df.query("symbol == 'AAPL'")
    .augment_rolling_risk_metrics(
        date_column='date',
        close_column='adjusted',
        window=252
    )
)
risk_df.head()
```

``` {python}
# Multiple stocks with groupby and benchmark
risk_df = (
    df.groupby('symbol')
    .augment_rolling_risk_metrics(
        date_column='date',
        close_column='adjusted',
        # benchmark_column='market_adjusted_returns',  # Use if a benchmark returns column exists
        window=60,
        engine='polars'
    )
)
risk_df.head()
```

``` {python}
# Selective metrics
risk_df = (
    df.groupby('symbol')
    .augment_rolling_risk_metrics(
        date_column='date',
        close_column='adjusted',
        window=252,
        metrics=['sharpe_ratio', 'sortino_ratio', 'volatility_annualized'],
    )
)
risk_df.tail()
```