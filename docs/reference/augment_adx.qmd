# augment_adx { #pytimetk.augment_adx }

```python
augment_adx(
    data,
    date_column,
    high_column,
    low_column,
    close_column,
    periods=14,
    reduce_memory=False,
    engine='pandas',
)
```

Calculate Average Directional Index (ADX), +DI, and -DI for a financial time series to determine strength of trend.

## Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                                            | Description                                                                                     | Default    |
|---------------|-----------------------------------------------------------------|-------------------------------------------------------------------------------------------------|------------|
| data          | Union\[pd.DataFrame, pd.core.groupby.generic.DataFrameGroupBy\] | Input pandas DataFrame or GroupBy object with time series data.                                 | _required_ |
| date_column   | str                                                             | Column name containing dates or timestamps.                                                     | _required_ |
| high_column   | str                                                             | Column name with high prices.                                                                   | _required_ |
| low_column    | str                                                             | Column name with low prices.                                                                    | _required_ |
| close_column  | str                                                             | Column name with closing prices.                                                                | _required_ |
| periods       | Union\[int, Tuple\[int, int\], List\[int\]\]                    | Number of periods for ADX calculation. Accepts int, tuple (start, end), or list. Default is 14. | `14`       |
| reduce_memory | bool                                                            | If True, reduces memory usage before calculation. Default is False.                             | `False`    |
| engine        | str                                                             | Computation engine: 'pandas' or 'polars'. Default is 'pandas'.                                  | `'pandas'` |

## Returns {.doc-section .doc-section-returns}

| Name   | Type         | Description                                                                                                                                                                                                                                   |
|--------|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|        | pd.DataFrame | DataFrame with added columns: - {close_column}_plus_di_{period}: Positive Directional Indicator (+DI) - {close_column}_minus_di_{period}: Negative Directional Indicator (-DI) - {close_column}_adx_{period}: Average Directional Index (ADX) |

## Notes {.doc-section .doc-section-notes}

- The ADX is a trend strength indicator that ranges from 0 to 100.
- A high ADX value indicates a strong trend, while a low ADX value indicates a weak trend.
- The +DI and -DI values range from 0 to 100.
- The ADX is calculated as the average of the DX values over the specified period.
- The DX value is calculated as 100 * |(+DI - -DI)| / (+DI + -DI).
- The True Range (TR) is the maximum of the following:
    - High - Low
    - High - Previous Close
    - Low - Previous Close
- The +DM is calculated as follows:
    - If High - Previous High > Previous Low - Low, then +DM = max(High - Previous High, 0)
    - Otherwise, +DM = 0
- The -DM is calculated as follows:
    - If Previous Low - Low > High - Previous High, then -DM = max(Previous Low - Low, 0)
    - Otherwise, -DM = 0

References: 

- https://www.investopedia.com/terms/a/adx.asp

## Examples {.doc-section .doc-section-examples}

```{python}
import pandas as pd
import pytimetk as tk

df = tk.load_dataset('stocks_daily', parse_dates=['date'])

# Example 1 - Single stock ADX with pandas engine
adx_df = (
    df.query("symbol == 'AAPL'")
    .augment_adx(
        date_column='date',
        high_column='high',
        low_column='low',
        close_column='close',
        periods=[14, 28]
    )
)
adx_df.head()
```

```{python}
# Example 2 - Multiple stocks with groupby using pandas engine
adx_df = (
    df.groupby('symbol')
    .augment_adx(
        date_column='date',
        high_column='high',
        low_column='low',
        close_column='close',
        periods=14
    )
)
adx_df.groupby('symbol').tail(1)
```

```{python}
# Example 3 - Single stock ADX with polars engine
adx_df = (
    df.query("symbol == 'AAPL'")
    .augment_adx(
        date_column='date',
        high_column='high',
        low_column='low',
        close_column='close',
        periods=[14, 28],
        engine='polars'
    )
)
adx_df.head()
```

```{python}
# Example 4 - Multiple stocks with groupby using polars engine
adx_df = (
    df.groupby('symbol')
    .augment_adx(
        date_column='date',
        high_column='high',
        low_column='low',
        close_column='close',
        periods=14,
        engine='polars'
    )
)
adx_df.groupby('symbol').tail(1)
```