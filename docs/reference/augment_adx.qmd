# augment_adx { #pytimetk.augment_adx }

```python
augment_adx(
    data,
    date_column,
    high_column,
    low_column,
    close_column,
    periods=14,
    reduce_memory=False,
    engine='auto',
)
```

Calculate Average Directional Index (ADX), +DI, and -DI using pandas or polars backends.

## Parameters {.doc-section .doc-section-parameters}

| Name          | Type                                   | Description                                                                                                                                   | Default    |
|---------------|----------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|------------|
| data          | DataFrame or GroupBy(pandas or polars) | Input financial data. Grouped inputs are processed per group before the indicators are appended.                                              | _required_ |
| date_column   | str                                    | Name of the column containing date information.                                                                                               | _required_ |
| high_column   | str                                    | Name of the column containing high prices.                                                                                                    | _required_ |
| low_column    | str                                    | Name of the column containing low prices.                                                                                                     | _required_ |
| close_column  | str                                    | Name of the column containing closing prices. Indicator columns are prefixed with this name.                                                  | _required_ |
| periods       | int, tuple, or list                    | Lookback windows for smoothing. Accepts an integer, a tuple specifying an inclusive range, or a list of explicit periods. Defaults to ``14``. | `14`       |
| reduce_memory | bool                                   | Attempt to reduce memory usage when operating on pandas data. If a polars input is supplied a warning is emitted and no conversion occurs.    | `False`    |
| engine        | (auto, pandas, polars)                 | Execution engine. ``"auto"`` (default) infers the backend from the input data while allowing explicit overrides.                              | `"auto"`   |

## Returns {.doc-section .doc-section-returns}

| Name   | Type      | Description                                                                                                                                                                                                                    |
|--------|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|        | DataFrame | DataFrame with the following columns appended for each ``period``:  - ``{close_column}_plus_di_{period}`` - ``{close_column}_minus_di_{period}`` - ``{close_column}_adx_{period}``  The return type matches the input backend. |

## Notes {.doc-section .doc-section-notes}

The implementation follows Wilder's smoothing approach using exponential
moving averages with ``alpha = 1 / period`` for the true range (TR) and
directional movement (+DM, -DM) components. Division by zero is guarded by
returning ``NaN`` when the denominator is zero.

## Examples {.doc-section .doc-section-examples}

```{python}
import pytimetk as tk

df = tk.load_dataset("stocks_daily", parse_dates=["date"])

# Pandas example (engine inferred)
adx_df = (
    df.groupby("symbol")
    .augment_adx(
        date_column="date",
        high_column="high",
        low_column="low",
        close_column="close",
        periods=[14, 28],
    )
)

adx_df.glimpse()
```

```{python}
# Polars example (method chaining)
import polars as pl

pl_df = pl.from_pandas(df.query("symbol == 'AAPL'"))

adx_pl = pl_df.tk.augment_adx(
    date_column="date",
    high_column="high",
    low_column="low",
    close_column="close",
    periods=14,
)

adx_pl.glimpse()
```