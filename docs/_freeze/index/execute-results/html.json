{
  "hash": "4d6997616c3e25b8f8965a3620d54410",
  "result": {
    "markdown": "---\ntoc: true\ntoc-depth: 3\nnumber-sections: true\nnumber-depth: 2\ntitle: PyTimeTK <img src=\"logo-timetk.png\" align=\"right\" height=\"138\" />\n---\n\n\n\n\n<div class=\"container-badges\">\n  <a href=\"https://github.com/business-science/pytimetk/actions\">\n  <img alt=\"Github Actions\" src=\"https://github.com/business-science/pytimetk/actions/workflows/timetk-checks.yaml/badge.svg\"/>\n  </a>\n  <a href=\"https://pypi.python.org/pypi/pytimetk\">\n  <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/pytimetk.svg\"/>\n  </a>\n  <a href=\"https://business-science.github.io/pytimetk/contributing.html\">\n  <img alt=\"PRs Welcome\" src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"/>\n  </a>\n</div>\n\n\n> Time series easier, faster, more fun. Pytimetk.\n\n[**Please ⭐ us on GitHub (it takes 2-seconds and means a lot).**](https://github.com/business-science/pytimetk)\n\n# Introducing pytimetk: Simplifying Time Series Analysis for Everyone\n\nTime series analysis is fundamental in many fields, from business forecasting to scientific research. While the Python ecosystem offers tools like `pandas`, they sometimes can be verbose and not optimized for all operations, especially for complex time-based aggregations and visualizations.\n\nEnter **pytimetk**. Crafted with a blend of ease-of-use and computational efficiency, `pytimetk` significantly simplifies the process of time series manipulation and visualization. By leveraging the `polars` backend, you can experience speed improvements ranging from 3X to a whopping 3500X. Let's dive into a comparative analysis.\n\n| Features/Properties | **pytimetk**                  | **pandas (+matplotlib)**               |\n|---------------------|-------------------------------|---------------------------------------|\n| **Speed**           | 🚀 3X to 3500X Faster          | 🐢 Standard                           |\n| **Code Simplicity** | 🎉 Concise, readable syntax    | 📜 Often verbose                      |\n| `plot_timeseries()` | 🎨 2 lines, no customization  | 🎨 16 lines, customization needed    |\n| `summarize_by_time()` | 🕐 2 lines, 13.4X faster     | 🕐 6 lines, 2 for-loops               |\n| `pad_by_time()`     | ⛳ 2 lines, fills gaps in timeseries        | ❌ No equivalent    |\n| `anomalize()`       | 📈 2 lines, detects and corrects anomalies  | ❌ No equivalent    |\n| `augment_timeseries_signature()` | 📅 1 line, all calendar features    | 🕐 29 lines of `dt` extractors |\n| `augment_rolling()` | 🏎️ 10X to 3500X faster     | 🐢 Slow Rolling Operations |\n| polars `.tk` plotting | ✅ Plot directly on `pl.DataFrame` (`plot_timeseries`, `plot_anomalies`, `plot_correlation_funnel`, …) | ❌ pandas-only accessor |\n| polars `.tk` accessor | ✅ Core, feature, and plotting helpers available via `.tk` on pandas/polars | ❌ N/A |\n| Feature store & caching | 🗃️ Persist, version, and reuse feature sets (with optional MLflow logging) | ❌ Manual recompute, no metadata lineage |\n\nAs evident from the table, **pytimetk** is not just about speed; it also simplifies your codebase. For example, `summarize_by_time()`, converts a 6-line, double for-loop routine in `pandas` into a concise 2-line operation. And with the `polars` engine, get results 13.4X faster than `pandas`!\n  \nSimilarly, `plot_timeseries()` dramatically streamlines the plotting process, encapsulating what would typically require 16 lines of `matplotlib` code into a mere 2-line command in **pytimetk**, without sacrificing customization or quality. And with `plotly` and `plotnine` engines, you can create interactive plots and beautiful static visualizations with just a few lines of code.\n\nFor calendar features, **pytimetk** offers `augment_timeseries_signature()` which cuts down on over 30 lines of `pandas` dt extractions. For rolling features, **pytimetk** offers `augment_rolling()`, which is 10X to 3500X faster than `pandas`. It also offers `pad_by_time()` to fill gaps in your time series data, and `anomalize()` to detect and correct anomalies in your time series data.\n\nJoin the revolution in time series analysis. Reduce your code complexity, increase your productivity, and harness the speed that **pytimetk** brings to your workflows.\n\nExplore more at our [pytimetk homepage](https://business-science.github.io/pytimetk/).\n\n# Installation\n\nInstall the latest stable version of `pytimetk` using `pip`:\n\n```bash\npip install pytimetk\n```\n\nAlternatively you can install the development version:\n\n```bash\npip install --upgrade --force-reinstall git+https://github.com/business-science/pytimetk.git\n```\n\n# Quickstart:\n\nThis is a simple code to test the function `summarize_by_time`:\n\n```python\nimport pytimetk as tk\nimport pandas as pd\n\ndf = tk.datasets.load_dataset('bike_sales_sample')\ndf['order_date'] = pd.to_datetime(df['order_date'])\n\ndf \\\n    .groupby(\"category_2\") \\\n    .summarize_by_time(\n        date_column='order_date', \n        value_column= 'total_price',\n        freq = \"MS\",\n        agg_func = ['mean', 'sum'],\n        engine = \"polars\"\n    )\n```\n\n\n## What's New in pytimetk 2.0.0\n\n- Added polars `.tk` accessor support for plotting helpers (`plot_timeseries`, `plot_anomalies`, `plot_anomalies_decomp`, `plot_anomalies_cleaned`, `plot_correlation_funnel`).\n- Polars users can now call these functions directly on `pl.DataFrame` objects via the `.tk` accessor; results mirror the pandas interface (Plotly `Figure` or plotnine `ggplot`).\n- See the [change log](https://business-science.github.io/pytimetk/changelog.html) for more details.\n\n## Feature Store & Caching (New)\n\nPersist expensive feature engineering steps once and reuse them everywhere. Register a transform, build it on a dataset, and reload it in any notebook or job with automatic versioning, metadata, and cache hits.\n\n```python\nimport pandas as pd\nimport pytimetk as tk\n\ndf = tk.load_dataset(\"bike_sales_sample\", parse_dates=[\"order_date\"])\n\nstore = tk.FeatureStore()\n\nstore.register(\n    \"sales_signature\",\n    lambda data: tk.augment_timeseries_signature(\n        data,\n        date_column=\"order_date\",\n        engine=\"pandas\",\n    ),\n    default_key_columns=(\"order_id\",),\n    description=\"Calendar signatures for sales orders.\",\n)\n\nresult = store.build(\"sales_signature\", df)\nprint(result.from_cache)  # False first run, True on subsequent builds\n```\n\n- Supports local disk or any `pyarrow` filesystem (e.g., `s3://`, `gs://`) via the `artifact_uri` parameter, plus optional file-based locking for concurrent jobs.\n- Optional MLflow helpers capture feature versions and artifacts with your experiments for reproducible pipelines.\n\n# Documentation\n\nGet started with the [pytimetk documentation](https://business-science.github.io/pytimetk/)\n\n- [📈 Overview](https://business-science.github.io/pytimetk/)\n- [🏁 Getting Started](https://business-science.github.io/pytimetk/getting-started/02_quick_start.html)\n- [🗺️ Beginner Guides](https://business-science.github.io/pytimetk/guides/01_visualization.html)\n- [📘Applied Data Science Tutorials](https://business-science.github.io/pytimetk/tutorials/01_sales_crm.html)\n- [📄 API Reference](https://business-science.github.io/pytimetk/reference/)\n\n# 🏆 More Coming Soon...\n\nWe are in the early stages of development. But it's obvious the potential for `pytimetk` now in Python. 🐍\n\n- Please [⭐ us on GitHub](https://github.com/business-science/pytimetk) (it takes 2-seconds and means a lot). \n- To make requests, please see our [Project Roadmap GH Issue #2](https://github.com/business-science/pytimetk/issues/2). You can make requests there. \n- Want to contribute? [See our contributing guide here.](/contributing.html)\n\n# ⭐️ Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=business-science/pytimetk&type=Date)](https://star-history.com/#business-science/pytimetk&Date)\n\n[**Please ⭐ us on GitHub (it takes 2 seconds and means a lot).**](https://github.com/business-science/pytimetk)\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}