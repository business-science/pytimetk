{
  "hash": "0300032b11ac0283ffec016fd0cd5038",
  "result": {
    "markdown": "---\ntoc: true\ntoc-depth: 3\nnumber-sections: true\nnumber-depth: 2\ntitle: PyTimeTK <img src=\"logo-timetk.png\" align=\"right\" height=\"138\" />\n---\n\n\n\n\n<div class=\"container-badges\">\n  <a href=\"https://github.com/business-science/pytimetk/actions\">\n  <img alt=\"Github Actions\" src=\"https://github.com/business-science/pytimetk/actions/workflows/timetk-checks.yaml/badge.svg\"/>\n  </a>\n  <a href=\"https://pypi.python.org/pypi/pytimetk\">\n  <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/pytimetk.svg\"/>\n  </a>\n  <a href=\"https://business-science.github.io/pytimetk/contributing.html\">\n  <img alt=\"PRs Welcome\" src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"/>\n  </a>\n</div>\n\n\n> Time series easier, faster, more fun. Pytimetk.\n\n**PyTimetk's Mission:** To make time series analysis easier, faster, and more enjoyable in Python.\n\n[**Please ‚≠ê us on GitHub (it takes 2-seconds and means a lot).**](https://github.com/business-science/pytimetk)\n\n# Introducing pytimetk: Simplifying Time Series Analysis for Everyone\n\nTime series analysis is fundamental in many fields, from business forecasting to scientific research. While the Python ecosystem offers tools like `pandas`, they sometimes can be verbose and not optimized for all operations, especially for complex time-based aggregations and visualizations.\n\nEnter **pytimetk**. Crafted with a blend of ease-of-use and computational efficiency, `pytimetk` significantly simplifies the process of time series manipulation and visualization. By leveraging the `polars` backend, you can experience speed improvements ranging from 3X to a whopping 3500X. Let's dive into a comparative analysis.\n\n\n| Features/Properties | **pytimetk**                  | **pandas (+matplotlib)**               |\n|---------------------|-------------------------------|---------------------------------------|\n| **Speed**           | üöÄ 3X to 500X Faster          | üê¢ Standard                           |\n| **Code Simplicity** | üéâ Concise, readable syntax    | üìú Often verbose                      |\n| `plot_timeseries()` | üé® 2 lines, no customization  | üé® 16 lines, customization needed    |\n| `summarize_by_time()` | üïê 2 lines, 13.4X faster     | üïê 6 lines, 2 for-loops               |\n| `pad_by_time()`     | ‚õ≥ 2 lines, fills gaps in timeseries        | ‚ùå No equivalent    |\n| `anomalize()`       | üìà 2 lines, detects and corrects anomalies  | ‚ùå No equivalent    |\n| `augment_timeseries_signature()` | üìÖ 1 line, all calendar features    | üïê 30 lines of `dt` extractors |\n| `augment_rolling()` | üèéÔ∏è 10X to 3500X faster     | üê¢ Slow Rolling Operations |\n\nAs evident from the table, **pytimetk** is not just about speed; it also simplifies your codebase. For example, `summarize_by_time()`, converts a 6-line, double for-loop routine in `pandas` into a concise 2-line operation. And with the `polars` engine, get results 13.4X faster than `pandas`!\n  \nSimilarly, `plot_timeseries()` dramatically streamlines the plotting process, encapsulating what would typically require 16 lines of `matplotlib` code into a mere 2-line command in **pytimetk**, without sacrificing customization or quality. And with `plotly` and `plotnine` engines, you can create interactive plots and beautiful static visualizations with just a few lines of code.\n\nFor calendar features, **pytimetk** offers `augment_timeseries_signature()` which cuts down on over 30 lines of `pandas` dt extractions. For rolling features, **pytimetk** offers `augment_rolling()`, which is 10X to 3500X faster than `pandas`. It also offers `pad_by_time()` to fill gaps in your time series data, and `anomalize()` to detect and correct anomalies in your time series data.\n\nJoin the revolution in time series analysis. Reduce your code complexity, increase your productivity, and harness the speed that **pytimetk** brings to your workflows.\n\nExplore more at our [pytimetk homepage](https://business-science.github.io/pytimetk/).\n\n# üöÄ Installation\n\nInstall the Latest Stable Version:\n\n``` bash\npip install pytimetk\n```\n\nAlternatively, install the Development GitHub Version:\n\n```bash\npip install --upgrade --force-reinstall git+https://github.com/business-science/pytimetk.git\n```\n\n# üèÅ Quick Start: A Monthly Sales Analysis\n\nThis is a simple exercise to showcase the power of [`summarize_by_time()`](/reference/summarize_by_time.html):\n\n### Import Libraries & Data\n\nFirst, `import pytimetk as tk`. This gets you access to the most important functions. Use `tk.load_dataset()` to load the \"bike_sales_sample\" dataset.\n\n::: {.callout-note collapse=\"false\"}\n## About the Bike Sales Sample Dataset\n\nThis dataset contains \"orderlines\" for orders recieved. The `order_date` column contains timestamps. We can use this column to peform sales aggregations (e.g. total revenue).\n:::\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pytimetk as tk\nimport pandas as pd\n\ndf = tk.load_dataset('bike_sales_sample')\ndf['order_date'] = pd.to_datetime(df['order_date'])\n\ndf   \n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>order_id</th>\n      <th>order_line</th>\n      <th>order_date</th>\n      <th>quantity</th>\n      <th>price</th>\n      <th>total_price</th>\n      <th>model</th>\n      <th>category_1</th>\n      <th>category_2</th>\n      <th>frame_material</th>\n      <th>bikeshop_name</th>\n      <th>city</th>\n      <th>state</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2011-01-07</td>\n      <td>1</td>\n      <td>6070</td>\n      <td>6070</td>\n      <td>Jekyll Carbon 2</td>\n      <td>Mountain</td>\n      <td>Over Mountain</td>\n      <td>Carbon</td>\n      <td>Ithaca Mountain Climbers</td>\n      <td>Ithaca</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>2</td>\n      <td>2011-01-07</td>\n      <td>1</td>\n      <td>5970</td>\n      <td>5970</td>\n      <td>Trigger Carbon 2</td>\n      <td>Mountain</td>\n      <td>Over Mountain</td>\n      <td>Carbon</td>\n      <td>Ithaca Mountain Climbers</td>\n      <td>Ithaca</td>\n      <td>NY</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1</td>\n      <td>2011-01-10</td>\n      <td>1</td>\n      <td>2770</td>\n      <td>2770</td>\n      <td>Beast of the East 1</td>\n      <td>Mountain</td>\n      <td>Trail</td>\n      <td>Aluminum</td>\n      <td>Kansas City 29ers</td>\n      <td>Kansas City</td>\n      <td>KS</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2</td>\n      <td>2011-01-10</td>\n      <td>1</td>\n      <td>5970</td>\n      <td>5970</td>\n      <td>Trigger Carbon 2</td>\n      <td>Mountain</td>\n      <td>Over Mountain</td>\n      <td>Carbon</td>\n      <td>Kansas City 29ers</td>\n      <td>Kansas City</td>\n      <td>KS</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>1</td>\n      <td>2011-01-10</td>\n      <td>1</td>\n      <td>10660</td>\n      <td>10660</td>\n      <td>Supersix Evo Hi-Mod Team</td>\n      <td>Road</td>\n      <td>Elite Road</td>\n      <td>Carbon</td>\n      <td>Louisville Race Equipment</td>\n      <td>Louisville</td>\n      <td>KY</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2461</th>\n      <td>321</td>\n      <td>3</td>\n      <td>2011-12-22</td>\n      <td>1</td>\n      <td>1410</td>\n      <td>1410</td>\n      <td>CAAD8 105</td>\n      <td>Road</td>\n      <td>Elite Road</td>\n      <td>Aluminum</td>\n      <td>Miami Race Equipment</td>\n      <td>Miami</td>\n      <td>FL</td>\n    </tr>\n    <tr>\n      <th>2462</th>\n      <td>322</td>\n      <td>1</td>\n      <td>2011-12-28</td>\n      <td>1</td>\n      <td>1250</td>\n      <td>1250</td>\n      <td>Synapse Disc Tiagra</td>\n      <td>Road</td>\n      <td>Endurance Road</td>\n      <td>Aluminum</td>\n      <td>Phoenix Bi-peds</td>\n      <td>Phoenix</td>\n      <td>AZ</td>\n    </tr>\n    <tr>\n      <th>2463</th>\n      <td>322</td>\n      <td>2</td>\n      <td>2011-12-28</td>\n      <td>1</td>\n      <td>2660</td>\n      <td>2660</td>\n      <td>Bad Habit 2</td>\n      <td>Mountain</td>\n      <td>Trail</td>\n      <td>Aluminum</td>\n      <td>Phoenix Bi-peds</td>\n      <td>Phoenix</td>\n      <td>AZ</td>\n    </tr>\n    <tr>\n      <th>2464</th>\n      <td>322</td>\n      <td>3</td>\n      <td>2011-12-28</td>\n      <td>1</td>\n      <td>2340</td>\n      <td>2340</td>\n      <td>F-Si 1</td>\n      <td>Mountain</td>\n      <td>Cross Country Race</td>\n      <td>Aluminum</td>\n      <td>Phoenix Bi-peds</td>\n      <td>Phoenix</td>\n      <td>AZ</td>\n    </tr>\n    <tr>\n      <th>2465</th>\n      <td>322</td>\n      <td>4</td>\n      <td>2011-12-28</td>\n      <td>1</td>\n      <td>5860</td>\n      <td>5860</td>\n      <td>Synapse Hi-Mod Dura Ace</td>\n      <td>Road</td>\n      <td>Endurance Road</td>\n      <td>Carbon</td>\n      <td>Phoenix Bi-peds</td>\n      <td>Phoenix</td>\n      <td>AZ</td>\n    </tr>\n  </tbody>\n</table>\n<p>2466 rows √ó 13 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Using `summarize_by_time()` for a Sales Analysis\n\nYour company might be interested in sales patterns for various categories of bicycles. We can obtain a grouped monthly sales aggregation by `category_1` in two lines of code:\n\n1. First use pandas's `groupby()` method to group the DataFrame on `category_1`\n2. Next, use timetk's `summarize_by_time()` method to apply the sum function my month start (\"MS\") and use `wide_format = 'False'` to return the dataframe in a long format (Note long format is the default). The default engine is `\"pandas\"`. Selecting `engine = \"polars\"` allows us to improve the speed of the function. \n\nThe result is the total revenue for Mountain and Road bikes by month. \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nsummary_category_1_df = df \\\n    .groupby(\"category_1\") \\\n    .summarize_by_time(\n        date_column  = 'order_date', \n        value_column = 'total_price',\n        freq         = \"MS\",\n        agg_func     = 'sum',\n        wide_format  = False,\n        engine       = \"polars\"\n    )\n\n# Quickly examine each column\nsummary_category_1_df.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>: 24 rows of 3 columns\ncategory_1:       object            ['Mountain', 'Mountain', 'Mountain', ...\norder_date:       datetime64[ns]    [Timestamp('2011-01-01 00:00:00'), T ...\ntotal_price_sum:  int64             [221490, 660555, 358855, 1075975, 45 ...\n```\n:::\n:::\n\n\n### Visualizing Sales Patterns\n\n::: {.callout-note collapse=\"false\"}\n## Now available: `plot_timeseries()`.\n\nPlot time series is a quick and easy way to visualize time series and make professional time series plots. \n:::\n\nWith the data summarized by time, we can visualize with `plot_timeseries()`. `pytimetk` functions are `groupby()` aware meaning they understand if your data is grouped to do things by group. This is useful in time series where we often deal with 100s of time series groups. \n\nThe default engine in \"plotnine\" for static plotting. Setting the `engine = \"plotly\"` returns an interactive plot. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nsummary_category_1_df \\\n    .groupby('category_1') \\\n    .plot_timeseries(\n        date_column  = 'order_date',\n        value_column = 'total_price_sum',\n        smooth_frac  = 0.8,\n        engine       = \"plotly\"\n    )\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"5286c4c9-7bdb-4789-a1ab-801b2ae52b20\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"5286c4c9-7bdb-4789-a1ab-801b2ae52b20\")) {                    Plotly.newPlot(                        \"5286c4c9-7bdb-4789-a1ab-801b2ae52b20\",                        [{\"line\":{\"color\":\"rgba(44, 62, 80, 1.0)\",\"width\":0.65},\"mode\":\"lines\",\"name\":\"total_price_sum\",\"showlegend\":false,\"x\":[\"2011-01-01T00:00:00\",\"2011-02-01T00:00:00\",\"2011-03-01T00:00:00\",\"2011-04-01T00:00:00\",\"2011-05-01T00:00:00\",\"2011-06-01T00:00:00\",\"2011-07-01T00:00:00\",\"2011-08-01T00:00:00\",\"2011-09-01T00:00:00\",\"2011-10-01T00:00:00\",\"2011-11-01T00:00:00\",\"2011-12-01T00:00:00\"],\"y\":[221490,660555,358855,1075975,450440,723040,767740,361255,401125,377335,549345,276055],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverlabel\":{\"font\":{\"size\":8.8}}},{\"line\":{\"color\":\"rgba(51, 102, 255, 1.0)\",\"width\":1.0},\"mode\":\"lines\",\"name\":\"Smoother\",\"showlegend\":false,\"x\":[\"2011-01-01T00:00:00\",\"2011-02-01T00:00:00\",\"2011-03-01T00:00:00\",\"2011-04-01T00:00:00\",\"2011-05-01T00:00:00\",\"2011-06-01T00:00:00\",\"2011-07-01T00:00:00\",\"2011-08-01T00:00:00\",\"2011-09-01T00:00:00\",\"2011-10-01T00:00:00\",\"2011-11-01T00:00:00\",\"2011-12-01T00:00:00\"],\"y\":[376663.48471446673,446959.7697079851,514137.49573183706,578457.7215888742,632509.2683400059,623273.9092840238,567085.2279904813,518132.00117887,476077.90927500685,424535.8213673224,376054.5442319171,332727.54536695353],\"type\":\"scatter\",\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverlabel\":{\"font\":{\"size\":8.8}}},{\"line\":{\"color\":\"rgba(44, 62, 80, 1.0)\",\"width\":0.65},\"mode\":\"lines\",\"name\":\"total_price_sum\",\"showlegend\":false,\"x\":[\"2011-01-01T00:00:00\",\"2011-02-01T00:00:00\",\"2011-03-01T00:00:00\",\"2011-04-01T00:00:00\",\"2011-05-01T00:00:00\",\"2011-06-01T00:00:00\",\"2011-07-01T00:00:00\",\"2011-08-01T00:00:00\",\"2011-09-01T00:00:00\",\"2011-10-01T00:00:00\",\"2011-11-01T00:00:00\",\"2011-12-01T00:00:00\"],\"y\":[261525,501520,301120,751165,393730,690405,426690,318535,413595,357585,456740,197065],\"type\":\"scatter\",\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverlabel\":{\"font\":{\"size\":8.8}}},{\"line\":{\"color\":\"rgba(51, 102, 255, 1.0)\",\"width\":1.0},\"mode\":\"lines\",\"name\":\"Smoother\",\"showlegend\":false,\"x\":[\"2011-01-01T00:00:00\",\"2011-02-01T00:00:00\",\"2011-03-01T00:00:00\",\"2011-04-01T00:00:00\",\"2011-05-01T00:00:00\",\"2011-06-01T00:00:00\",\"2011-07-01T00:00:00\",\"2011-08-01T00:00:00\",\"2011-09-01T00:00:00\",\"2011-10-01T00:00:00\",\"2011-11-01T00:00:00\",\"2011-12-01T00:00:00\"],\"y\":[341897.3419373227,387431.8498741961,429715.83646044944,467711.8953893882,499284.8981599913,487833.7842666665,455338.0897487429,424449.63156829413,394616.8316989604,357201.8222017318,322146.1198387504,288715.53457746323],\"type\":\"scatter\",\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverlabel\":{\"font\":{\"size\":8.8}}}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"showticklabels\":true,\"title\":{\"text\":\"\"},\"tickformat\":\"%b %Y\",\"visible\":true,\"tickfont\":{\"size\":8.8}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.625,1.0],\"title\":{\"text\":\"\"},\"tickfont\":{\"size\":8.8}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.0,1.0],\"showticklabels\":true,\"visible\":true,\"tickfont\":{\"size\":8.8}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,0.375],\"tickfont\":{\"size\":8.8}},\"annotations\":[{\"font\":{\"size\":8.8},\"showarrow\":false,\"text\":\"Mountain\",\"x\":0.5,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":1.0,\"yanchor\":\"bottom\",\"yref\":\"paper\"},{\"font\":{\"size\":8.8},\"showarrow\":false,\"text\":\"Road\",\"x\":0.5,\"xanchor\":\"center\",\"xref\":\"paper\",\"y\":0.375,\"yanchor\":\"bottom\",\"yref\":\"paper\"}],\"legend\":{\"title\":{\"text\":\"Legend\",\"font\":{\"size\":8.8}},\"font\":{\"size\":8.8}},\"title\":{\"text\":\"Time Series Plot\",\"font\":{\"size\":13.2}},\"margin\":{\"l\":10,\"r\":10,\"t\":40,\"b\":40},\"font\":{\"size\":11},\"autosize\":true},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('5286c4c9-7bdb-4789-a1ab-801b2ae52b20');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n# üìö Documentation\n\nNext step? Learn more with the [pytimetk documentation](https://business-science.github.io/pytimetk/)\n\n- [üìà Overview](https://business-science.github.io/pytimetk/)\n- [üèÅ Getting Started](https://business-science.github.io/pytimetk/getting-started/02_quick_start.html)\n- [üó∫Ô∏è Beginner Guides](https://business-science.github.io/pytimetk/guides/01_visualization.html)\n- [üìòApplied Data Science Tutorials](https://business-science.github.io/pytimetk/tutorials/01_sales_crm.html)\n- [üèéÔ∏èSpeed Comparisons](https://business-science.github.io/pytimetk/performance/01_speed_comparisons.html)\n- [üìÑ API Reference](https://business-science.github.io/pytimetk/reference/)\n\n# üçª Contributing\n\nInterested in helping us make this the best Python package for time series analysis? We'd love your help. \n\n[Follow these instructions to Contribute.](/contributing.html)\n\n# üèÜ More Coming Soon...\n\nWe are in the early stages of development. But it's obvious the potential for `pytimetk` now in Python. üêç\n\n- Please [‚≠ê us on GitHub](https://github.com/business-science/pytimetk) (it takes 2-seconds and means a lot). \n- To make requests, please see our [Project Roadmap GH Issue #2](https://github.com/business-science/pytimetk/issues/2). You can make requests there. \n- Want to contribute? [See our contributing guide here.](/contributing.html) \n\n# ‚≠êÔ∏è Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=business-science/pytimetk&type=Date)](https://star-history.com/#business-science/pytimetk&Date)\n\n[**Please ‚≠ê us on GitHub (it takes 2 seconds and means a lot).**](https://github.com/business-science/pytimetk)\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}