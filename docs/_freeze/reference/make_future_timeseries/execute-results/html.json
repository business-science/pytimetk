{
  "hash": "e107c5adb737de8da1b311b79e77c60a",
  "result": {
    "markdown": "---\ntitle: make_future_timeseries\n---\n\n\n\n```python\nmake_future_timeseries(idx, length_out, freq=None, force_regular=False)\n```\n\nMake future dates for a time series.\n\nThe function `make_future_timeseries` takes a pandas Series or DateTimeIndex \nand generates a future sequence of dates based on the frequency of the input \nseries.\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name          | Type                          | Description                                                                                                                                                                                                                                                                                                                                                                                                                             | Default    |\n|---------------|-------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| idx           | pd.Series or pd.DateTimeIndex | The `idx` parameter is the input time series data. It can be either a  pandas Series or a pandas DateTimeIndex. It represents the existing dates  in the time series.                                                                                                                                                                                                                                                                   | _required_ |\n| length_out    | int                           | The parameter `length_out` is an integer that represents the number of  future dates to generate for the time series.                                                                                                                                                                                                                                                                                                                   | _required_ |\n| freq          | str                           | The `frequency` parameter is a string that specifies the frequency of the  future dates. If `frequency` is set to `None`, the frequency of the future  dates will be inferred from the input data (e.g. business calendars might  be used). The default value is `None`.                                                                                                                                                                | `None`     |\n| force_regular | bool                          | The `force_regular` parameter is a boolean flag that determines whether  the frequency of the future dates should be forced to be regular. If  `force_regular` is set to `True`, the frequency of the future dates will  be forced to be regular. If `force_regular` is set to `False`, the  frequency of the future dates will be inferred from the input data (e.g.  business calendars might be used). The default value is `False`. | `False`    |\n\n## Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                     |\n|--------|-----------|-------------------------------------------------|\n|        | pd.Series | A pandas Series object containing future dates. |\n\n## Examples {.doc-section .doc-section-examples}\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport pytimetk as tk\n\n# Works with a single date (must provide a length out and frequency if only \n# 1 date is provided)\ntk.make_future_timeseries(\"2011-01-01\", 5, \"D\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n0   2011-01-02\n1   2011-01-03\n2   2011-01-04\n3   2011-01-05\n4   2011-01-06\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# DateTimeIndex: Generate 5 future dates (with inferred frequency)\n\ndates = pd.Series(pd.to_datetime(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04']))\n\nfuture_dates_dt = tk.make_future_timeseries(dates, 5)\nfuture_dates_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0   2022-01-05\n1   2022-01-06\n2   2022-01-07\n3   2022-01-08\n4   2022-01-09\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Series: Generate 5 future dates\npd.Series(future_dates_dt).make_future_timeseries(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n0   2022-01-10\n1   2022-01-11\n2   2022-01-12\n3   2022-01-13\n4   2022-01-14\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Hourly Frequency: Generate 5 future dates\ntimestamps = [\"2023-01-01 01:00\", \"2023-01-01 02:00\", \"2023-01-01 03:00\", \"2023-01-01 04:00\", \"2023-01-01 05:00\"]\n\ndates = pd.to_datetime(timestamps)\n\ntk.make_future_timeseries(dates, 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n0   2023-01-01 06:00:00\n1   2023-01-01 07:00:00\n2   2023-01-01 08:00:00\n3   2023-01-01 09:00:00\n4   2023-01-01 10:00:00\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Monthly Frequency: Generate 4 future dates\ndates = pd.to_datetime([\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\"])\n\ntk.make_future_timeseries(dates, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0   2021-05-01\n1   2021-06-01\n2   2021-07-01\n3   2021-08-01\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Quarterly Frequency: Generate 4 future dates\ndates = pd.to_datetime([\"2021-01-01\", \"2021-04-01\", \"2021-07-01\", \"2021-10-01\"])\n\ntk.make_future_timeseries(dates, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0   2022-01-01\n1   2022-04-01\n2   2022-07-01\n3   2022-10-01\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Irregular Dates: Business Days\ndates = pd.to_datetime([\"2021-01-01\", \"2021-01-04\", \"2021-01-05\", \"2021-01-06\"])\n\ntk.get_frequency(dates)\n\ntk.make_future_timeseries(dates, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n0   2021-01-07\n1   2021-01-08\n2   2021-01-11\n3   2021-01-12\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Irregular Dates: Business Days (Force Regular)    \ntk.make_future_timeseries(dates, 4, force_regular=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0   2021-01-07\n1   2021-01-08\n2   2021-01-09\n3   2021-01-10\ndtype: datetime64[ns]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "make_future_timeseries_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}