{
  "hash": "ba700d29ef61faba6ff8919261e4ba59",
  "result": {
    "markdown": "---\ntitle: pad_by_time\n---\n\n\n\n```python\npad_by_time(\n    data,\n    date_column,\n    freq='D',\n    start_date=None,\n    end_date=None,\n    engine='pandas',\n)\n```\n\nMake irregular time series regular by padding with missing dates.\n\nThe `pad_by_time` function inserts missing dates into a Pandas DataFrame or\nDataFrameGroupBy object, through the process making an irregularly spaced\ntime series regularly spaced.\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name        | Type                                   | Description| Default    |\n|-------------|----------------------------------------||------------|\n| data        | DataFrame or GroupBy(pandas or polars) | The `data` parameter can be either a pandas/polars DataFrame or a grouped object. It represents the data that you want to pad with missing dates.                                                                                                                                                                                                                                                                                                                                                                                              | _required_ |\n| date_column | str                                    | The `date_column` parameter is a string that specifies the name of the column in the DataFrame that contains the dates. This column will be used to determine the minimum and maximum dates in theDataFrame, and to generate the regular date range for padding.                                                                                                                                                                                                                                                                               | _required_ |\n| freq        | str                                    | The `freq` parameter specifies the frequency at which the missing timestamps should be generated. It accepts a string representing a pandas frequency alias. Some common frequency aliases include:  - S: secondly frequency - min: minute frequency - H: hourly frequency - B: business day frequency - D: daily frequency - W: weekly frequency - M: month end frequency - MS: month start frequency - BMS: Business month start - Q: quarter end frequency - QS: quarter start frequency - Y: year end frequency - YS: year start frequency | `'D'`      |\n| start_date  | str                                    | Specifies the start of the padded series.  If NULL, it will use the lowest value of the input variable. In the case of groups, it will use the lowest value by group.                                                                                                                                                                                                                                                                                                                                                                          | `None`     |\n| end_date    | Optional\\[str\\]                        | Specifies the end of the padded series.  If NULL, it will use the highest value of the input variable.  In the case of groups, it will use the highest value by group.                                                                                                                                                                                                                                                                                                                                                                         | `None`     |\n| engine      | (pandas, polars, auto)                 | Execution engine. ``\"pandas\"`` (default) performs the computation using pandas. ``\"polars\"`` converts the result to a polars DataFrame on return. ``\"auto\"`` infers the engine from the input data.                                                                                                                                                                                                                                                                                                                                            | `\"pandas\"` |\n\n## Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                                                                                                                   |\n|--------|-----------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n|        | DataFrame | The function `pad_by_time` returns a DataFrame extended with the padded dates. The concrete type matches the engine used to process the data. |\n\n## Notes {.doc-section .doc-section-notes}\n\n\n## Performance\n\nThis function uses a number of techniques to speed up computation for large\ndatasets with many time series groups.\n\n- We use a vectorized approach to generate the Cartesian product of all\n  unique group values and all dates in the date range.\n- We then merge this Cartesian product with the original data to introduce\n  NaN values for missing rows. This approach is much faster than looping\n  through each group and applying a function to each group.\n\nNote: There is no parallel processing since the vectorized approach is\n      almost always faster.\n\n## Examples {.doc-section .doc-section-examples}\n\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport pytimetk as tk\n\ndf = tk.load_dataset('stocks_daily', parse_dates = ['date'])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>META</td>\n      <td>2013-01-02</td>\n      <td>27.440001</td>\n      <td>28.180000</td>\n      <td>27.420000</td>\n      <td>28.000000</td>\n      <td>69846400</td>\n      <td>28.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>META</td>\n      <td>2013-01-03</td>\n      <td>27.879999</td>\n      <td>28.469999</td>\n      <td>27.590000</td>\n      <td>27.770000</td>\n      <td>63140600</td>\n      <td>27.770000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>META</td>\n      <td>2013-01-04</td>\n      <td>28.010000</td>\n      <td>28.930000</td>\n      <td>27.830000</td>\n      <td>28.760000</td>\n      <td>72715400</td>\n      <td>28.760000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>META</td>\n      <td>2013-01-07</td>\n      <td>28.690001</td>\n      <td>29.790001</td>\n      <td>28.650000</td>\n      <td>29.420000</td>\n      <td>83781800</td>\n      <td>29.420000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>META</td>\n      <td>2013-01-08</td>\n      <td>29.510000</td>\n      <td>29.600000</td>\n      <td>28.860001</td>\n      <td>29.059999</td>\n      <td>45871300</td>\n      <td>29.059999</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>16189</th>\n      <td>GOOG</td>\n      <td>2023-09-15</td>\n      <td>138.800003</td>\n      <td>139.360001</td>\n      <td>137.179993</td>\n      <td>138.300003</td>\n      <td>48947600</td>\n      <td>138.300003</td>\n    </tr>\n    <tr>\n      <th>16190</th>\n      <td>GOOG</td>\n      <td>2023-09-18</td>\n      <td>137.630005</td>\n      <td>139.929993</td>\n      <td>137.630005</td>\n      <td>138.960007</td>\n      <td>16233600</td>\n      <td>138.960007</td>\n    </tr>\n    <tr>\n      <th>16191</th>\n      <td>GOOG</td>\n      <td>2023-09-19</td>\n      <td>138.250000</td>\n      <td>139.175003</td>\n      <td>137.500000</td>\n      <td>138.830002</td>\n      <td>15479100</td>\n      <td>138.830002</td>\n    </tr>\n    <tr>\n      <th>16192</th>\n      <td>GOOG</td>\n      <td>2023-09-20</td>\n      <td>138.830002</td>\n      <td>138.839996</td>\n      <td>134.520004</td>\n      <td>134.589996</td>\n      <td>21473500</td>\n      <td>134.589996</td>\n    </tr>\n    <tr>\n      <th>16193</th>\n      <td>GOOG</td>\n      <td>2023-09-21</td>\n      <td>132.389999</td>\n      <td>133.190002</td>\n      <td>131.089996</td>\n      <td>131.360001</td>\n      <td>22042700</td>\n      <td>131.360001</td>\n    </tr>\n  </tbody>\n</table>\n<p>16194 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Pad Single Time Series: Fill missing dates\npadded_df = (\n    df\n        .query('symbol == \"AAPL\"')\n        .pad_by_time(\n            date_column = 'date',\n            freq        = 'D'\n        )\n)\npadded_df\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>symbol</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2013-01-02</td>\n      <td>AAPL</td>\n      <td>19.779285</td>\n      <td>19.821428</td>\n      <td>19.343929</td>\n      <td>19.608213</td>\n      <td>560518000.0</td>\n      <td>16.791180</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2013-01-03</td>\n      <td>AAPL</td>\n      <td>19.567142</td>\n      <td>19.631071</td>\n      <td>19.321428</td>\n      <td>19.360714</td>\n      <td>352965200.0</td>\n      <td>16.579241</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2013-01-04</td>\n      <td>AAPL</td>\n      <td>19.177500</td>\n      <td>19.236786</td>\n      <td>18.779642</td>\n      <td>18.821428</td>\n      <td>594333600.0</td>\n      <td>16.117437</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2013-01-05</td>\n      <td>AAPL</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2013-01-06</td>\n      <td>AAPL</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3910</th>\n      <td>2023-09-17</td>\n      <td>AAPL</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3911</th>\n      <td>2023-09-18</td>\n      <td>AAPL</td>\n      <td>176.479996</td>\n      <td>179.380005</td>\n      <td>176.169998</td>\n      <td>177.970001</td>\n      <td>67257600.0</td>\n      <td>177.970001</td>\n    </tr>\n    <tr>\n      <th>3912</th>\n      <td>2023-09-19</td>\n      <td>AAPL</td>\n      <td>177.520004</td>\n      <td>179.630005</td>\n      <td>177.130005</td>\n      <td>179.070007</td>\n      <td>51826900.0</td>\n      <td>179.070007</td>\n    </tr>\n    <tr>\n      <th>3913</th>\n      <td>2023-09-20</td>\n      <td>AAPL</td>\n      <td>179.259995</td>\n      <td>179.699997</td>\n      <td>175.399994</td>\n      <td>175.490005</td>\n      <td>58436200.0</td>\n      <td>175.490005</td>\n    </tr>\n    <tr>\n      <th>3914</th>\n      <td>2023-09-21</td>\n      <td>AAPL</td>\n      <td>174.550003</td>\n      <td>176.300003</td>\n      <td>173.860001</td>\n      <td>173.929993</td>\n      <td>63047900.0</td>\n      <td>173.929993</td>\n    </tr>\n  </tbody>\n</table>\n<p>3915 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Pad by Group: Pad each group with missing dates\npadded_df = (\n    df\n        .groupby('symbol')\n        .pad_by_time(\n            date_column = 'date',\n            freq        = 'D'\n        )\n)\npadded_df\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAPL</td>\n      <td>2013-01-02</td>\n      <td>19.779285</td>\n      <td>19.821428</td>\n      <td>19.343929</td>\n      <td>19.608213</td>\n      <td>560518000.0</td>\n      <td>16.791180</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AAPL</td>\n      <td>2013-01-03</td>\n      <td>19.567142</td>\n      <td>19.631071</td>\n      <td>19.321428</td>\n      <td>19.360714</td>\n      <td>352965200.0</td>\n      <td>16.579241</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AAPL</td>\n      <td>2013-01-04</td>\n      <td>19.177500</td>\n      <td>19.236786</td>\n      <td>18.779642</td>\n      <td>18.821428</td>\n      <td>594333600.0</td>\n      <td>16.117437</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AAPL</td>\n      <td>2013-01-05</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AAPL</td>\n      <td>2013-01-06</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23485</th>\n      <td>NVDA</td>\n      <td>2023-09-17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>23486</th>\n      <td>NVDA</td>\n      <td>2023-09-18</td>\n      <td>427.480011</td>\n      <td>442.420013</td>\n      <td>420.000000</td>\n      <td>439.660004</td>\n      <td>50027100.0</td>\n      <td>439.660004</td>\n    </tr>\n    <tr>\n      <th>23487</th>\n      <td>NVDA</td>\n      <td>2023-09-19</td>\n      <td>438.329987</td>\n      <td>439.660004</td>\n      <td>430.019989</td>\n      <td>435.200012</td>\n      <td>37306400.0</td>\n      <td>435.200012</td>\n    </tr>\n    <tr>\n      <th>23488</th>\n      <td>NVDA</td>\n      <td>2023-09-20</td>\n      <td>436.000000</td>\n      <td>439.029999</td>\n      <td>422.230011</td>\n      <td>422.390015</td>\n      <td>36710800.0</td>\n      <td>422.390015</td>\n    </tr>\n    <tr>\n      <th>23489</th>\n      <td>NVDA</td>\n      <td>2023-09-21</td>\n      <td>415.829987</td>\n      <td>421.000000</td>\n      <td>409.799988</td>\n      <td>410.170013</td>\n      <td>44893000.0</td>\n      <td>410.170013</td>\n    </tr>\n  </tbody>\n</table>\n<p>23490 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Pad with end dates specified\npadded_df = (\n    df\n        .groupby('symbol')\n        .pad_by_time(\n            date_column = 'date',\n            freq        = 'D',\n            start_date  = '2013-01-01',\n            end_date    = '2023-09-22'\n        )\n)\npadded_df.query('symbol == \"AAPL\"')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symbol</th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>adjusted</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AAPL</td>\n      <td>2013-01-01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AAPL</td>\n      <td>2013-01-02</td>\n      <td>19.779285</td>\n      <td>19.821428</td>\n      <td>19.343929</td>\n      <td>19.608213</td>\n      <td>560518000.0</td>\n      <td>16.791180</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AAPL</td>\n      <td>2013-01-03</td>\n      <td>19.567142</td>\n      <td>19.631071</td>\n      <td>19.321428</td>\n      <td>19.360714</td>\n      <td>352965200.0</td>\n      <td>16.579241</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AAPL</td>\n      <td>2013-01-04</td>\n      <td>19.177500</td>\n      <td>19.236786</td>\n      <td>18.779642</td>\n      <td>18.821428</td>\n      <td>594333600.0</td>\n      <td>16.117437</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AAPL</td>\n      <td>2013-01-05</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3912</th>\n      <td>AAPL</td>\n      <td>2023-09-18</td>\n      <td>176.479996</td>\n      <td>179.380005</td>\n      <td>176.169998</td>\n      <td>177.970001</td>\n      <td>67257600.0</td>\n      <td>177.970001</td>\n    </tr>\n    <tr>\n      <th>3913</th>\n      <td>AAPL</td>\n      <td>2023-09-19</td>\n      <td>177.520004</td>\n      <td>179.630005</td>\n      <td>177.130005</td>\n      <td>179.070007</td>\n      <td>51826900.0</td>\n      <td>179.070007</td>\n    </tr>\n    <tr>\n      <th>3914</th>\n      <td>AAPL</td>\n      <td>2023-09-20</td>\n      <td>179.259995</td>\n      <td>179.699997</td>\n      <td>175.399994</td>\n      <td>175.490005</td>\n      <td>58436200.0</td>\n      <td>175.490005</td>\n    </tr>\n    <tr>\n      <th>3915</th>\n      <td>AAPL</td>\n      <td>2023-09-21</td>\n      <td>174.550003</td>\n      <td>176.300003</td>\n      <td>173.860001</td>\n      <td>173.929993</td>\n      <td>63047900.0</td>\n      <td>173.929993</td>\n    </tr>\n    <tr>\n      <th>3916</th>\n      <td>AAPL</td>\n      <td>2023-09-22</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>3917 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Polars DataFrame using the tk accessor\nimport pandas as pd\nimport polars as pl\n\n\nsample = pd.DataFrame(\n    {\n        \"date\": pd.date_range(\"2022-01-01\", periods=3, freq=\"D\"),\n        \"value\": [1, 2, 3],\n    }\n)\n\npl_df = pl.from_pandas(sample)\n\npl_df.tk.pad_by_time(\n    date_column='date',\n    freq='D',\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>date</th><th>value</th></tr><tr><td>datetime[ns]</td><td>i64</td></tr></thead><tbody><tr><td>2022-01-01 00:00:00</td><td>1</td></tr><tr><td>2022-01-02 00:00:00</td><td>2</td></tr><tr><td>2022-01-03 00:00:00</td><td>3</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pad_by_time_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}